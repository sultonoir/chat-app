generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  username        String?   @unique
  lastSeen        DateTime?
  online          Boolean?  @default(false)
  status          String?
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  accounts        Account[]
  group           Group[]
  message         Message[]
  chatSender      Chat[] @relation("sender")
  chatReceiver    Chat[] @relation("receiver")
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Chat{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  message         Message[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  senderId        String   @db.ObjectId
  receiverId      String   @db.ObjectId
  sender          User     @relation("sender",fields: [senderId], references: [id], onDelete: Cascade)
  receiver        User     @relation("receiver",fields: [receiverId], references: [id], onDelete: Cascade)
}

model Group{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  image             String
  desc              String?
  isAdmin           Boolean  @default(true)
  userId            String   @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  member          String[]  @db.ObjectId
  message         Message[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}



model Message{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content           String?
  fileUrl           String?
  groupId           String?  @db.ObjectId
  chatId            String?  @db.ObjectId
  userId            String   @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat              Chat?    @relation(fields: [chatId],references: [id],onDelete: Cascade)
  group             Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}